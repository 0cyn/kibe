buildscript {
    dependencies {
        classpath "org.kohsuke:github-api:${project.github_api_version}"
    }
}

plugins {
    id 'maven-publish'
    id 'fabric-loom'
    id "org.ajoberstar.grgit"
    id "org.jetbrains.kotlin.jvm"
    id "com.matthewprenger.cursegradle"
    id "com.modrinth.minotaur"
}

sourceCompatibility = JavaVersion.VERSION_16
targetCompatibility = JavaVersion.VERSION_16
compileKotlin.kotlinOptions.jvmTarget = "1.8"

archivesBaseName = project.archives_base_name+"-"+project.minecraft_version
version = project.mod_version
group = project.maven_group

def ENV = System.getenv()

def RELEASE_NAME = "Kibe ${version}"
def RELEASE_TYPE = version.split("-").size() > 0 ? (version.split("-")[1] == "BETA" || version.split("-")[1] == "ALPHA") ? version.split("-")[1] : "ALPHA" : "RELEASE"
def RELEASE_FILE = "${buildDir}/libs/${archivesBaseName}-${version}.jar"

@SuppressWarnings('GrMethodMayBeStatic')
def getChangeLog() {
    return "A changelog can be found at https://github.com/lucaargolo/kibe/commits/"
}

@SuppressWarnings('GrMethodMayBeStatic')
def getBranch() {
    def ENV = System.getenv()

    if (ENV.GITHUB_REF) {
        def branch = ENV.GITHUB_REF
        return branch.substring(branch.lastIndexOf("/") + 1)
    }

    if (grgit == null) {
        return "unknown"
    }

    def branch = grgit.branch.current().name
    return branch.substring(branch.lastIndexOf("/") + 1)
}

repositories {
    maven {
        name = "Fabric"
        url = "https://maven.fabricmc.net/"
        content {
            includeGroup "net.fabricmc"
        }
    }
    maven {
        name = "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
        content {
            includeGroup "alexiil.mc.lib"
        }
    }
    maven {
        name = "Ladysnake Mods"
        url = "https://ladysnake.jfrog.io/artifactory/mods"
        content {
            includeGroup "io.github.ladysnake"
        }
    }
    maven {
        name = "JitPack"
        url = "https://jitpack.io"
        content {
            includeGroup "com.github.emilyalexandra"
        }
    }
    maven {
        name = "TerraformersMC"
        url = "https://maven.terraformersmc.com/releases"
        content {
            includeGroup "com.terraformersmc"
        }
    }
    maven {
        name = "Shedaniel"
        url = "https://maven.shedaniel.me/"
        content {
            includeGroup "me.shedaniel"
            includeGroup "me.shedaniel.cloth"
            includeGroup "me.shedaniel.cloth.api"
        }
    }
    mavenLocal()
}

minecraft {
    accessWidener "src/main/resources/kibe.accesswidener"
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"

    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "net.fabricmc:fabric-language-kotlin:${project.fabric_kotlin_version}"

    modCompileOnly ("com.github.emilyalexandra:trinkets:${project.trinkets_version}") {
        exclude group: "io.github.onyxstudios.Cardinal-Components-API", module: "cardinal-components-base"
        exclude group: "io.github.onyxstudios.Cardinal-Components-API", module: "cardinal-components-entity"
    }

    modImplementation "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"
    include "io.github.ladysnake:PlayerAbilityLib:${project.pal_version}"

    modImplementation("alexiil.mc.lib:libblockattributes-core:${project.lba_version}")
    include("alexiil.mc.lib:libblockattributes-core:${project.lba_version}")

    modImplementation("alexiil.mc.lib:libblockattributes-fluids:${project.lba_version}")
    include("alexiil.mc.lib:libblockattributes-fluids:${project.lba_version}")

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"
    //modImplementation "me.shedaniel:RoughlyEnoughItems:${project.rei_version}"

}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy(DuplicatesStrategy.WARN)
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        duplicatesStrategy(DuplicatesStrategy.WARN)
        exclude "fabric.mod.json"
    }
}

tasks.withType(JavaCompile) {
    it.options.encoding = "UTF-8"
    it.options.release = 16
}

java {
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}"}
    }
}

//Temporary maven publishing
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        mavenLocal()
    }
}

//Github publishing
import org.kohsuke.github.GHReleaseBuilder
import org.kohsuke.github.GitHub

task github(dependsOn: remapJar, group: "upload") {
    onlyIf {
        ENV.GITHUB_TOKEN
    }

    doLast {
        def github = GitHub.connectUsingOAuth(ENV.GITHUB_TOKEN as String)
        def repository = github.getRepository(ENV.GITHUB_REPOSITORY)

        def releaseBuilder = new GHReleaseBuilder(repository, version as String)
        releaseBuilder.name(RELEASE_NAME)
        releaseBuilder.body(getChangeLog())
        releaseBuilder.commitish(getBranch())

        def ghRelease = releaseBuilder.create()
        ghRelease.uploadAsset(file(RELEASE_FILE), "application/java-archive")
    }
}

//Curseforge publishing
curseforge {
    if (ENV.CURSEFORGE_API_KEY) {
        apiKey = ENV.CURSEFORGE_API_KEY
    }

    project {
        id = project.curseforge_id
        changelog = getChangeLog()
        releaseType = RELEASE_TYPE.toLowerCase()
        addGameVersion project.minecraft_version
        addGameVersion "Fabric"

        mainArtifact(file(RELEASE_FILE)) {
            displayName = RELEASE_NAME
            relations {
                embeddedLibrary "libblockattributes"
                embeddedLibrary "pal"
                optionalDependency "modmenu"
                optionalDependency "trinkets-fabric"
                requiredDependency "fabric-api"
                requiredDependency "fabric-language-kotlin"
            }
        }

        afterEvaluate {
            uploadTask.dependsOn("remapJar")
        }
    }

    options {
        forgeGradleIntegration = false
    }
}

//Modrinth publishing
import com.modrinth.minotaur.TaskModrinthUpload
import com.modrinth.minotaur.request.VersionType

task modrinth(type: TaskModrinthUpload, dependsOn: remapJar, group: "upload") {
    onlyIf {
        ENV.MODRINTH_TOKEN
    }
    token = ENV.MODRINTH_TOKEN

    projectId = project.modrinth_id
    changelog = getChangeLog()

    versionNumber = version
    versionName = RELEASE_NAME
    versionType = VersionType.valueOf(RELEASE_TYPE)

    uploadFile = file(RELEASE_FILE)

    addGameVersion(project.minecraft_version as String)
    addLoader("fabric")
}